{"ast":null,"code":"\"use strict\";\n\nvar validateNames = require(\"./helpers/validate-names\");\n\nmodule.exports = function (core) {\n  core.DOMImplementation.prototype.hasFeature = function () {\n    return true;\n  };\n\n  core.DOMImplementation.prototype.createDocumentType = function (qualifiedName, publicId, systemId) {\n    qualifiedName = String(qualifiedName);\n    publicId = String(publicId);\n    systemId = String(systemId);\n    validateNames.qname(qualifiedName, core);\n    return new core.DocumentType(this._ownerDocument, qualifiedName, publicId, systemId);\n  };\n\n  core.DOMImplementation.prototype.createDocument = function (namespace, qualifiedName, doctype) {\n    namespace = namespace !== null ? String(namespace) : namespace;\n    qualifiedName = qualifiedName === null ? \"\" : String(qualifiedName);\n\n    if (doctype === undefined) {\n      doctype = null;\n    }\n\n    var document = new core.Document({\n      parsingMode: \"xml\"\n    });\n    var element = null;\n\n    if (qualifiedName !== \"\") {\n      element = document.createElementNS(namespace, qualifiedName);\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    return document;\n  };\n\n  core.DOMImplementation.prototype.createHTMLDocument = function (title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    var document = new core.HTMLDocument({\n      parsingMode: \"html\"\n    }); // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n\n    var doctype = this.createDocumentType(\"html\", \"\", \"\");\n    document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.\n\n    var htmlElement = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"html\");\n    document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n\n    var headElement = document.createElement(\"head\");\n    htmlElement.appendChild(headElement); // If the title argument is not omitted:\n\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      var titleElement = document.createElement(\"title\");\n      headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n\n      titleElement.appendChild(document.createTextNode(title));\n    } // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n\n\n    htmlElement.appendChild(document.createElement(\"body\")); // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  };\n};","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/lib/jsdom/living/dom-implementation.js"],"names":["validateNames","require","module","exports","core","DOMImplementation","prototype","hasFeature","createDocumentType","qualifiedName","publicId","systemId","String","qname","DocumentType","_ownerDocument","createDocument","namespace","doctype","undefined","document","Document","parsingMode","element","createElementNS","appendChild","createHTMLDocument","title","HTMLDocument","htmlElement","headElement","createElement","titleElement","createTextNode"],"mappings":"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","sourcesContent":["\"use strict\";\nvar validateNames = require(\"./helpers/validate-names\");\n\nmodule.exports = function (core) {\n  core.DOMImplementation.prototype.hasFeature = function () {\n    return true;\n  };\n\n  core.DOMImplementation.prototype.createDocumentType = function (qualifiedName, publicId, systemId) {\n    qualifiedName = String(qualifiedName);\n    publicId = String(publicId);\n    systemId = String(systemId);\n\n    validateNames.qname(qualifiedName, core);\n\n    return new core.DocumentType(this._ownerDocument, qualifiedName, publicId, systemId);\n  };\n\n  core.DOMImplementation.prototype.createDocument = function (namespace, qualifiedName, doctype) {\n    namespace = namespace !== null ? String(namespace) : namespace;\n    qualifiedName = qualifiedName === null ? \"\" : String(qualifiedName);\n    if (doctype === undefined) {\n      doctype = null;\n    }\n\n    var document = new core.Document({ parsingMode: \"xml\" });\n\n    var element = null;\n    if (qualifiedName !== \"\") {\n      element = document.createElementNS(namespace, qualifiedName);\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    return document;\n  };\n\n  core.DOMImplementation.prototype.createHTMLDocument = function (title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    var document = new core.HTMLDocument({ parsingMode: \"html\" });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    var doctype = this.createDocumentType(\"html\", \"\", \"\");\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    var htmlElement = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"html\");\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    var headElement = document.createElement(\"head\");\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      var titleElement = document.createElement(\"title\");\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    htmlElement.appendChild(document.createElement(\"body\"));\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}