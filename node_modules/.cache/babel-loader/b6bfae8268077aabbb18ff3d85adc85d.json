{"ast":null,"code":"\"use strict\";\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nvar utils = require(\"./utils\");\n\nfunction VirtualConsole() {\n  // If \"error\" event has no listeners,\n  // EventEmitter throws an exception\n  this.on(\"error\", function () {});\n}\n\nutils.inheritFrom(EventEmitter, VirtualConsole, {\n  sendTo: function (anyConsole) {\n    Object.keys(anyConsole).forEach(function (method) {\n      if (typeof anyConsole[method] === \"function\") {\n        this.on(method, function () {\n          anyConsole[method].apply(anyConsole, arguments);\n        });\n      }\n    }, this);\n  }\n});\nmodule.exports = VirtualConsole;","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/lib/jsdom/virtual-console.js"],"names":["EventEmitter","require","utils","VirtualConsole","on","inheritFrom","sendTo","anyConsole","Object","keys","forEach","method","apply","arguments","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAArC;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEA,SAASE,cAAT,GAA0B;AACxB;AACA;AACA,OAAKC,EAAL,CAAQ,OAAR,EAAiB,YAAY,CAAE,CAA/B;AACD;;AAEDF,KAAK,CAACG,WAAN,CAAkBL,YAAlB,EAAgCG,cAAhC,EAAgD;AAC9CG,EAAAA,MAAM,EAAE,UAAUC,UAAV,EAAsB;AAC5BC,IAAAA,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,UAAUC,MAAV,EAAkB;AAChD,UAAI,OAAOJ,UAAU,CAACI,MAAD,CAAjB,KAA8B,UAAlC,EAA8C;AAC5C,aAAKP,EAAL,CAAQO,MAAR,EAAgB,YAAY;AAC1BJ,UAAAA,UAAU,CAACI,MAAD,CAAV,CAAmBC,KAAnB,CAAyBL,UAAzB,EAAqCM,SAArC;AACD,SAFD;AAGD;AACF,KAND,EAMG,IANH;AAOD;AAT6C,CAAhD;AAYAC,MAAM,CAACC,OAAP,GAAiBZ,cAAjB","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require(\"events\").EventEmitter;\nvar utils = require(\"./utils\");\n\nfunction VirtualConsole() {\n  // If \"error\" event has no listeners,\n  // EventEmitter throws an exception\n  this.on(\"error\", function () {});\n}\n\nutils.inheritFrom(EventEmitter, VirtualConsole, {\n  sendTo: function (anyConsole) {\n    Object.keys(anyConsole).forEach(function (method) {\n      if (typeof anyConsole[method] === \"function\") {\n        this.on(method, function () {\n          anyConsole[method].apply(anyConsole, arguments);\n        });\n      }\n    }, this);\n  }\n});\n\nmodule.exports = VirtualConsole;\n"]},"metadata":{},"sourceType":"script"}