{"ast":null,"code":"var core = require(\"../level1/core\"),\n    utils = require(\"../utils\"),\n    defineGetter = utils.defineGetter,\n    defineSetter = utils.defineSetter,\n    inheritFrom = utils.inheritFrom,\n    cssom = require(\"cssom\"),\n    cssstyle = require(\"cssstyle\"),\n    assert = require('assert'); // What works now:\n// - Accessing the rules defined in individual stylesheets\n// - Modifications to style content attribute are reflected in style property\n// - Modifications to style property are reflected in style content attribute\n// TODO\n// - Modifications to style element's textContent are reflected in sheet property.\n// - Modifications to style element's sheet property are reflected in textContent.\n// - Modifications to link.href property are reflected in sheet property.\n// - Less-used features of link: disabled\n// - Less-used features of style: disabled, scoped, title\n// - CSSOM-View\n//   - getComputedStyle(): requires default stylesheet, cascading, inheritance,\n//     filtering by @media (screen? print?), layout for widths/heights\n// - Load events are not in the specs, but apparently some browsers\n//   implement something. Should onload only fire after all @imports have been\n//   loaded, or only the primary sheet?\n\n\ncore.StyleSheet = cssom.StyleSheet;\ncore.MediaList = cssom.MediaList;\ncore.CSSStyleSheet = cssom.CSSStyleSheet;\ncore.CSSRule = cssom.CSSRule;\ncore.CSSStyleRule = cssom.CSSStyleRule;\ncore.CSSMediaRule = cssom.CSSMediaRule;\ncore.CSSImportRule = cssom.CSSImportRule;\ncore.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration; // Relavant specs\n// http://www.w3.org/TR/DOM-Level-2-Style (2000)\n// http://www.w3.org/TR/cssom-view/ (2008)\n// http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course\n// http://dev.w3.org/csswg/css-style-attr/  not sure what's new here\n// Objects that aren't in cssom library but should be:\n//   CSSRuleList  (cssom just uses array)\n//   CSSFontFaceRule\n//   CSSPageRule\n// These rules don't really make sense to implement, so CSSOM draft makes them\n// obsolete.\n//   CSSCharsetRule\n//   CSSUnknownRule\n// These objects are considered obsolete by CSSOM draft, although modern\n// browsers implement them.\n//   CSSValue\n//   CSSPrimitiveValue\n//   CSSValueList\n//   RGBColor\n//   Rect\n//   Counter\n// StyleSheetList -\n// http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-StyleSheetList\n// added a push method to help manage the length\n\ncore.StyleSheetList = function () {\n  this._length = 0;\n};\n\ncore.StyleSheetList.prototype = {\n  item: function (i) {\n    return this[i];\n  },\n  push: function (sheet) {\n    this[this._length] = sheet;\n    this._length++;\n  },\n\n  get length() {\n    return this._length;\n  }\n\n};\ndefineGetter(core.Document.prototype, 'styleSheets', function () {\n  if (!this._styleSheets) {\n    this._styleSheets = new core.StyleSheetList();\n  } // TODO: each style and link element should register its sheet on creation\n  // and remove it on removal.\n\n\n  return this._styleSheets;\n});\n/**\n * @this {core.HTMLLinkElement|core.HTMLStyleElement}\n * @param {string} url\n * @param {cssom.CSSStyleSheet} sheet\n * @see http://dev.w3.org/csswg/cssom/#requirements-on-user-agents-implementing0\n */\n\nfunction fetchStylesheet(url, sheet) {\n  core.resourceLoader.load(this, url, function (data, filename) {\n    // TODO: abort if the content-type is not text/css, and the document is\n    // in strict mode\n    sheet.href = core.resourceLoader.resolve(this.ownerDocument, url);\n    evaluateStylesheet.call(this, data, sheet, url);\n  });\n}\n/**\n * @this {core.HTMLLinkElement|core.HTMLStyleElement}\n * @param {string} data\n * @param {cssom.CSSStyleSheet} sheet\n * @param {string} baseUrl\n */\n\n\nfunction evaluateStylesheet(data, sheet, baseUrl) {\n  // this is the element\n  var newStyleSheet = cssom.parse(data);\n  var spliceArgs = newStyleSheet.cssRules;\n  spliceArgs.unshift(0, sheet.cssRules.length);\n  Array.prototype.splice.apply(sheet.cssRules, spliceArgs);\n  scanForImportRules.call(this, sheet.cssRules, baseUrl);\n  this.ownerDocument.styleSheets.push(sheet);\n}\n/**\n * @this {core.HTMLLinkElement|core.HTMLStyleElement}\n * @param {cssom.CSSStyleSheet} sheet\n * @param {string} baseUrl\n */\n\n\nfunction scanForImportRules(cssRules, baseUrl) {\n  if (!cssRules) return;\n\n  for (var i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules.call(this, cssRules[i].cssRules, baseUrl);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      fetchStylesheet.call(this, cssRules[i].href, this.sheet);\n    }\n  }\n}\n/**\n * @param {string} data\n * @param {cssstyle.CSSStyleDeclaration} style\n */\n\n\nfunction evaluateStyleAttribute(data) {// this is the element.\n}\n/**\n * Subclass of core.Attr that reflects the current cssText.\n */\n\n\nfunction StyleAttr(node, value) {\n  this._node = node;\n  core.Attr.call(this, node.ownerDocument, 'style');\n\n  if (!this._node._ignoreValueOfStyleAttr) {\n    this.nodeValue = value;\n  }\n}\n\ninheritFrom(core.Attr, StyleAttr, {\n  get nodeValue() {\n    if (typeof this._node._style === 'string') {\n      return this._node._style;\n    } else {\n      return this._node.style.cssText;\n    }\n  },\n\n  set nodeValue(value) {\n    this._node._style = value;\n  }\n\n});\nvar $setNode_super = core.AttributeList.prototype.$setNode;\n/**\n * Overwrite core.AttrNodeMap#setNamedItem to create a StyleAttr instance\n * instead of a core.Attr if the name equals 'style'.\n */\n\ncore.AttributeList.prototype.$setNode = function (attr) {\n  if (attr.name == 'style') {\n    attr = new StyleAttr(this._parentNode, attr.nodeValue);\n  }\n\n  return $setNode_super.call(this, attr);\n};\n/**\n * Lazily create a CSSStyleDeclaration.\n */\n\n\ndefineGetter(core.HTMLElement.prototype, 'style', function () {\n  if (typeof this._style === 'string') {\n    // currently, cssom's parse doesn't really work if you pass in\n    // {state: 'name'}, so instead we just build a dummy sheet.\n    var styleSheet = cssom.parse('dummy{' + this._style + '}');\n    this._style = new cssstyle.CSSStyleDeclaration();\n\n    if (styleSheet.cssRules.length > 0 && styleSheet.cssRules[0].style) {\n      var newStyle = styleSheet.cssRules[0].style;\n\n      for (var i = 0; i < newStyle.length; ++i) {\n        var prop = newStyle[i];\n\n        this._style.setProperty(prop, newStyle.getPropertyValue(prop), newStyle.getPropertyPriority(prop));\n      }\n    }\n  }\n\n  if (!this._style) {\n    this._style = new cssstyle.CSSStyleDeclaration();\n  }\n\n  if (!this.getAttributeNode('style')) {\n    // Tell the StyleAttr constructor to not overwrite this._style\n    this._ignoreValueOfStyleAttr = true;\n    this.setAttribute('style');\n    this._ignoreValueOfStyleAttr = false;\n  }\n\n  return this._style;\n});\nassert.equal(undefined, core.HTMLLinkElement._init);\n\ncore.HTMLLinkElement._init = function () {\n  this.addEventListener('DOMNodeInsertedIntoDocument', function () {\n    if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(this.rel)) {\n      // rel is a space-separated list of tokens, and the original rel types\n      // are case-insensitive.\n      return;\n    }\n\n    if (this.href) {\n      fetchStylesheet.call(this, this.href, this.sheet);\n    }\n  });\n  this.addEventListener('DOMNodeRemovedFromDocument', function () {});\n};\n/**\n * @this {HTMLStyleElement|HTMLLinkElement}\n */\n\n\nvar getOrCreateSheet = function () {\n  if (!this._cssStyleSheet) {\n    this._cssStyleSheet = new cssom.CSSStyleSheet();\n  }\n\n  return this._cssStyleSheet;\n};\n\ndefineGetter(core.HTMLLinkElement.prototype, 'sheet', getOrCreateSheet);\nassert.equal(undefined, core.HTMLStyleElement._init);\n\ncore.HTMLStyleElement._init = function () {\n  //console.log('init style')\n  this.addEventListener('DOMNodeInsertedIntoDocument', function () {\n    //console.log('style inserted')\n    //console.log('sheet: ', this.sheet);\n    if (this.type && this.type !== 'text/css') {\n      //console.log('bad type: ' + this.type)\n      return;\n    }\n\n    var content = '';\n\n    this._childNodes.forEach(function (child) {\n      if (child.nodeType === child.TEXT_NODE) {\n        // text node\n        content += child.nodeValue;\n      }\n    });\n\n    evaluateStylesheet.call(this, content, this.sheet, this._ownerDocument.URL);\n  });\n};\n\ndefineGetter(core.HTMLStyleElement.prototype, 'sheet', getOrCreateSheet);","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/lib/jsdom/level2/style.js"],"names":["core","require","utils","defineGetter","defineSetter","inheritFrom","cssom","cssstyle","assert","StyleSheet","MediaList","CSSStyleSheet","CSSRule","CSSStyleRule","CSSMediaRule","CSSImportRule","CSSStyleDeclaration","StyleSheetList","_length","prototype","item","i","push","sheet","length","Document","_styleSheets","fetchStylesheet","url","resourceLoader","load","data","filename","href","resolve","ownerDocument","evaluateStylesheet","call","baseUrl","newStyleSheet","parse","spliceArgs","cssRules","unshift","Array","splice","apply","scanForImportRules","styleSheets","evaluateStyleAttribute","StyleAttr","node","value","_node","Attr","_ignoreValueOfStyleAttr","nodeValue","_style","style","cssText","$setNode_super","AttributeList","$setNode","attr","name","_parentNode","HTMLElement","styleSheet","newStyle","prop","setProperty","getPropertyValue","getPropertyPriority","getAttributeNode","setAttribute","equal","undefined","HTMLLinkElement","_init","addEventListener","test","rel","getOrCreateSheet","_cssStyleSheet","HTMLStyleElement","type","content","_childNodes","forEach","child","nodeType","TEXT_NODE","_ownerDocument","URL"],"mappings":"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","sourcesContent":["var core = require(\"../level1/core\"),\n    utils = require(\"../utils\"),\n    defineGetter = utils.defineGetter,\n    defineSetter = utils.defineSetter,\n    inheritFrom = utils.inheritFrom,\n    cssom = require(\"cssom\"),\n    cssstyle = require(\"cssstyle\"),\n    assert = require('assert');\n\n// What works now:\n// - Accessing the rules defined in individual stylesheets\n// - Modifications to style content attribute are reflected in style property\n// - Modifications to style property are reflected in style content attribute\n// TODO\n// - Modifications to style element's textContent are reflected in sheet property.\n// - Modifications to style element's sheet property are reflected in textContent.\n// - Modifications to link.href property are reflected in sheet property.\n// - Less-used features of link: disabled\n// - Less-used features of style: disabled, scoped, title\n// - CSSOM-View\n//   - getComputedStyle(): requires default stylesheet, cascading, inheritance,\n//     filtering by @media (screen? print?), layout for widths/heights\n// - Load events are not in the specs, but apparently some browsers\n//   implement something. Should onload only fire after all @imports have been\n//   loaded, or only the primary sheet?\n\ncore.StyleSheet = cssom.StyleSheet;\ncore.MediaList = cssom.MediaList;\ncore.CSSStyleSheet = cssom.CSSStyleSheet;\ncore.CSSRule = cssom.CSSRule;\ncore.CSSStyleRule = cssom.CSSStyleRule;\ncore.CSSMediaRule = cssom.CSSMediaRule;\ncore.CSSImportRule = cssom.CSSImportRule;\ncore.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration;\n\n// Relavant specs\n// http://www.w3.org/TR/DOM-Level-2-Style (2000)\n// http://www.w3.org/TR/cssom-view/ (2008)\n// http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course\n// http://dev.w3.org/csswg/css-style-attr/  not sure what's new here\n\n// Objects that aren't in cssom library but should be:\n//   CSSRuleList  (cssom just uses array)\n//   CSSFontFaceRule\n//   CSSPageRule\n\n// These rules don't really make sense to implement, so CSSOM draft makes them\n// obsolete.\n//   CSSCharsetRule\n//   CSSUnknownRule\n\n// These objects are considered obsolete by CSSOM draft, although modern\n// browsers implement them.\n//   CSSValue\n//   CSSPrimitiveValue\n//   CSSValueList\n//   RGBColor\n//   Rect\n//   Counter\n\n// StyleSheetList -\n// http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-StyleSheetList\n// added a push method to help manage the length\ncore.StyleSheetList = function() {\n  this._length = 0;\n};\ncore.StyleSheetList.prototype = {\n  item: function (i) {\n    return this[i];\n  },\n  push: function (sheet) {\n    this[this._length] = sheet;\n    this._length++;\n  },\n  get length() {\n    return this._length;\n  }\n};\n\ndefineGetter(core.Document.prototype, 'styleSheets', function() {\n  if (!this._styleSheets) {\n    this._styleSheets = new core.StyleSheetList();\n  }\n  // TODO: each style and link element should register its sheet on creation\n  // and remove it on removal.\n  return this._styleSheets;\n});\n\n\n/**\n * @this {core.HTMLLinkElement|core.HTMLStyleElement}\n * @param {string} url\n * @param {cssom.CSSStyleSheet} sheet\n * @see http://dev.w3.org/csswg/cssom/#requirements-on-user-agents-implementing0\n */\nfunction fetchStylesheet(url, sheet) {\n  core.resourceLoader.load(this, url, function(data, filename) {\n    // TODO: abort if the content-type is not text/css, and the document is\n    // in strict mode\n    sheet.href = core.resourceLoader.resolve(this.ownerDocument, url);\n    evaluateStylesheet.call(this, data, sheet, url);\n  });\n}\n/**\n * @this {core.HTMLLinkElement|core.HTMLStyleElement}\n * @param {string} data\n * @param {cssom.CSSStyleSheet} sheet\n * @param {string} baseUrl\n */\nfunction evaluateStylesheet(data, sheet, baseUrl) {\n  // this is the element\n  var newStyleSheet = cssom.parse(data);\n  var spliceArgs = newStyleSheet.cssRules;\n  spliceArgs.unshift(0, sheet.cssRules.length);\n  Array.prototype.splice.apply(sheet.cssRules, spliceArgs);\n  scanForImportRules.call(this, sheet.cssRules, baseUrl);\n  this.ownerDocument.styleSheets.push(sheet);\n}\n/**\n * @this {core.HTMLLinkElement|core.HTMLStyleElement}\n * @param {cssom.CSSStyleSheet} sheet\n * @param {string} baseUrl\n */\nfunction scanForImportRules(cssRules, baseUrl) {\n  if (!cssRules) return;\n  for (var i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules.call(this, cssRules[i].cssRules, baseUrl);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      fetchStylesheet.call(this, cssRules[i].href, this.sheet);\n    }\n  }\n}\n\n/**\n * @param {string} data\n * @param {cssstyle.CSSStyleDeclaration} style\n */\nfunction evaluateStyleAttribute(data) {\n  // this is the element.\n\n}\n\n/**\n * Subclass of core.Attr that reflects the current cssText.\n */\nfunction StyleAttr(node, value) {\n  this._node = node;\n  core.Attr.call(this, node.ownerDocument, 'style');\n  if (!this._node._ignoreValueOfStyleAttr) {\n    this.nodeValue = value;\n  }\n}\ninheritFrom(core.Attr, StyleAttr, {\n  get nodeValue() {\n    if (typeof this._node._style === 'string') {\n      return this._node._style;\n    } else {\n      return this._node.style.cssText;\n    }\n  },\n  set nodeValue(value) {\n    this._node._style = value;\n  }\n});\n\nvar $setNode_super = core.AttributeList.prototype.$setNode;\n/**\n * Overwrite core.AttrNodeMap#setNamedItem to create a StyleAttr instance\n * instead of a core.Attr if the name equals 'style'.\n */\ncore.AttributeList.prototype.$setNode = function(attr) {\n  if (attr.name == 'style') {\n    attr = new StyleAttr(this._parentNode, attr.nodeValue);\n  }\n  return $setNode_super.call(this, attr);\n};\n\n/**\n * Lazily create a CSSStyleDeclaration.\n */\ndefineGetter(core.HTMLElement.prototype, 'style', function() {\n  if (typeof this._style === 'string') {\n    // currently, cssom's parse doesn't really work if you pass in\n    // {state: 'name'}, so instead we just build a dummy sheet.\n    var styleSheet = cssom.parse('dummy{' + this._style + '}');\n    this._style = new cssstyle.CSSStyleDeclaration();\n    if (styleSheet.cssRules.length > 0 && styleSheet.cssRules[0].style) {\n      var newStyle = styleSheet.cssRules[0].style;\n      for (var i = 0; i < newStyle.length; ++i) {\n        var prop = newStyle[i];\n        this._style.setProperty(\n            prop,\n            newStyle.getPropertyValue(prop),\n            newStyle.getPropertyPriority(prop));\n      }\n    }\n  }\n  if (!this._style) {\n    this._style = new cssstyle.CSSStyleDeclaration();\n\n  }\n  if (!this.getAttributeNode('style')) {\n    // Tell the StyleAttr constructor to not overwrite this._style\n    this._ignoreValueOfStyleAttr = true;\n    this.setAttribute('style');\n    this._ignoreValueOfStyleAttr = false;\n  }\n  return this._style;\n});\n\nassert.equal(undefined, core.HTMLLinkElement._init);\ncore.HTMLLinkElement._init = function() {\n  this.addEventListener('DOMNodeInsertedIntoDocument', function() {\n    if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(this.rel)) {\n      // rel is a space-separated list of tokens, and the original rel types\n      // are case-insensitive.\n      return;\n    }\n    if (this.href) {\n      fetchStylesheet.call(this, this.href, this.sheet);\n    }\n  });\n  this.addEventListener('DOMNodeRemovedFromDocument', function() {\n  });\n};\n/**\n * @this {HTMLStyleElement|HTMLLinkElement}\n */\nvar getOrCreateSheet = function() {\n  if (!this._cssStyleSheet) {\n    this._cssStyleSheet = new cssom.CSSStyleSheet();\n  }\n  return this._cssStyleSheet;\n};\ndefineGetter(core.HTMLLinkElement.prototype, 'sheet', getOrCreateSheet);\n\nassert.equal(undefined, core.HTMLStyleElement._init);\ncore.HTMLStyleElement._init = function() {\n  //console.log('init style')\n  this.addEventListener('DOMNodeInsertedIntoDocument', function() {\n    //console.log('style inserted')\n    //console.log('sheet: ', this.sheet);\n    if (this.type && this.type !== 'text/css') {\n      //console.log('bad type: ' + this.type)\n      return;\n    }\n    var content = '';\n    this._childNodes.forEach(function (child) {\n      if (child.nodeType === child.TEXT_NODE) { // text node\n        content += child.nodeValue;\n      }\n    });\n    evaluateStylesheet.call(this, content, this.sheet, this._ownerDocument.URL);\n  });\n};\ndefineGetter(core.HTMLStyleElement.prototype, 'sheet', getOrCreateSheet);\n"]},"metadata":{},"sourceType":"script"}