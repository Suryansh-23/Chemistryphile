{"ast":null,"code":"module.exports = function () {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n    this.name = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        peg$FAILED = {},\n        peg$startRuleFunctions = {\n      Name: peg$parseName,\n      QName: peg$parseQName\n    },\n        peg$startRuleFunction = peg$parseName,\n        peg$c0 = \":\",\n        peg$c1 = {\n      type: \"literal\",\n      value: \":\",\n      description: \"\\\":\\\"\"\n    },\n        peg$c2 = /^[A-Z]/,\n        peg$c3 = {\n      type: \"class\",\n      value: \"[A-Z]\",\n      description: \"[A-Z]\"\n    },\n        peg$c4 = \"_\",\n        peg$c5 = {\n      type: \"literal\",\n      value: \"_\",\n      description: \"\\\"_\\\"\"\n    },\n        peg$c6 = /^[a-z]/,\n        peg$c7 = {\n      type: \"class\",\n      value: \"[a-z]\",\n      description: \"[a-z]\"\n    },\n        peg$c8 = /^[\\xC0-\\xD6]/,\n        peg$c9 = {\n      type: \"class\",\n      value: \"[\\\\xC0-\\\\xD6]\",\n      description: \"[\\\\xC0-\\\\xD6]\"\n    },\n        peg$c10 = /^[\\xD8-\\xF6]/,\n        peg$c11 = {\n      type: \"class\",\n      value: \"[\\\\xD8-\\\\xF6]\",\n      description: \"[\\\\xD8-\\\\xF6]\"\n    },\n        peg$c12 = /^[\\xF8-\\u02FF]/,\n        peg$c13 = {\n      type: \"class\",\n      value: \"[\\\\xF8-\\\\u02FF]\",\n      description: \"[\\\\xF8-\\\\u02FF]\"\n    },\n        peg$c14 = /^[\\u0370-\\u037D]/,\n        peg$c15 = {\n      type: \"class\",\n      value: \"[\\\\u0370-\\\\u037D]\",\n      description: \"[\\\\u0370-\\\\u037D]\"\n    },\n        peg$c16 = /^[\\u037F-\\u1FFF]/,\n        peg$c17 = {\n      type: \"class\",\n      value: \"[\\\\u037F-\\\\u1FFF]\",\n      description: \"[\\\\u037F-\\\\u1FFF]\"\n    },\n        peg$c18 = /^[\\u200C-\\u200D]/,\n        peg$c19 = {\n      type: \"class\",\n      value: \"[\\\\u200C-\\\\u200D]\",\n      description: \"[\\\\u200C-\\\\u200D]\"\n    },\n        peg$c20 = /^[\\u2070-\\u218F]/,\n        peg$c21 = {\n      type: \"class\",\n      value: \"[\\\\u2070-\\\\u218F]\",\n      description: \"[\\\\u2070-\\\\u218F]\"\n    },\n        peg$c22 = /^[\\u2C00-\\u2FEF]/,\n        peg$c23 = {\n      type: \"class\",\n      value: \"[\\\\u2C00-\\\\u2FEF]\",\n      description: \"[\\\\u2C00-\\\\u2FEF]\"\n    },\n        peg$c24 = /^[\\u3001-\\uD7FF]/,\n        peg$c25 = {\n      type: \"class\",\n      value: \"[\\\\u3001-\\\\uD7FF]\",\n      description: \"[\\\\u3001-\\\\uD7FF]\"\n    },\n        peg$c26 = /^[\\uF900-\\uFDCF]/,\n        peg$c27 = {\n      type: \"class\",\n      value: \"[\\\\uF900-\\\\uFDCF]\",\n      description: \"[\\\\uF900-\\\\uFDCF]\"\n    },\n        peg$c28 = /^[\\uFDF0-\\uFFFD]/,\n        peg$c29 = {\n      type: \"class\",\n      value: \"[\\\\uFDF0-\\\\uFFFD]\",\n      description: \"[\\\\uFDF0-\\\\uFFFD]\"\n    },\n        peg$c30 = peg$FAILED,\n        peg$c31 = /^[\\uD800-\\uDB7F]/,\n        peg$c32 = {\n      type: \"class\",\n      value: \"[\\\\uD800-\\\\uDB7F]\",\n      description: \"[\\\\uD800-\\\\uDB7F]\"\n    },\n        peg$c33 = /^[\\uDC00-\\uDFFF]/,\n        peg$c34 = {\n      type: \"class\",\n      value: \"[\\\\uDC00-\\\\uDFFF]\",\n      description: \"[\\\\uDC00-\\\\uDFFF]\"\n    },\n        peg$c35 = \"-\",\n        peg$c36 = {\n      type: \"literal\",\n      value: \"-\",\n      description: \"\\\"-\\\"\"\n    },\n        peg$c37 = \".\",\n        peg$c38 = {\n      type: \"literal\",\n      value: \".\",\n      description: \"\\\".\\\"\"\n    },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = {\n      type: \"class\",\n      value: \"[0-9]\",\n      description: \"[0-9]\"\n    },\n        peg$c41 = \"\\xB7\",\n        peg$c42 = {\n      type: \"literal\",\n      value: \"\\xB7\",\n      description: \"\\\"\\\\xB7\\\"\"\n    },\n        peg$c43 = /^[\\u0300-\\u036F]/,\n        peg$c44 = {\n      type: \"class\",\n      value: \"[\\\\u0300-\\\\u036F]\",\n      description: \"[\\\\u0300-\\\\u036F]\"\n    },\n        peg$c45 = /^[\\u203F-\\u2040]/,\n        peg$c46 = {\n      type: \"class\",\n      value: \"[\\\\u203F-\\\\u2040]\",\n      description: \"[\\\\u203F-\\\\u2040]\"\n    },\n        peg$c47 = [],\n        peg$currPos = 0,\n        peg$reportedPos = 0,\n        peg$cachedPos = 0,\n        peg$cachedPosDetails = {\n      line: 1,\n      column: 1,\n      seenCR: false\n    },\n        peg$maxFailPos = 0,\n        peg$maxFailExpected = [],\n        peg$silentFails = 0,\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(null, [{\n        type: \"other\",\n        description: description\n      }], peg$reportedPos);\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n\n          if (ch === \"\\n\") {\n            if (!details.seenCR) {\n              details.line++;\n            }\n\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = {\n            line: 1,\n            column: 1,\n            seenCR: false\n          };\n        }\n\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n        expected.sort(function (a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n          }\n\n          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n            return '\\\\x0' + hex(ch);\n          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n            return '\\\\x' + hex(ch);\n          }).replace(/[\\u0180-\\u0FFF]/g, function (ch) {\n            return '\\\\u0' + hex(ch);\n          }).replace(/[\\u1080-\\uFFFF]/g, function (ch) {\n            return '\\\\u' + hex(ch);\n          });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc,\n            foundDesc,\n            i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);\n    }\n\n    function peg$parseNameStartChar() {\n      var s0, s1, s2;\n\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s0 = peg$c0;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c1);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (peg$c2.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c3);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 95) {\n            s0 = peg$c4;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c5);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (peg$c6.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (peg$c8.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c9);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (peg$c10.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c11);\n                  }\n                }\n\n                if (s0 === peg$FAILED) {\n                  if (peg$c12.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c13);\n                    }\n                  }\n\n                  if (s0 === peg$FAILED) {\n                    if (peg$c14.test(input.charAt(peg$currPos))) {\n                      s0 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s0 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c15);\n                      }\n                    }\n\n                    if (s0 === peg$FAILED) {\n                      if (peg$c16.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s0 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c17);\n                        }\n                      }\n\n                      if (s0 === peg$FAILED) {\n                        if (peg$c18.test(input.charAt(peg$currPos))) {\n                          s0 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s0 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c19);\n                          }\n                        }\n\n                        if (s0 === peg$FAILED) {\n                          if (peg$c20.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s0 = peg$FAILED;\n\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$c21);\n                            }\n                          }\n\n                          if (s0 === peg$FAILED) {\n                            if (peg$c22.test(input.charAt(peg$currPos))) {\n                              s0 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s0 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c23);\n                              }\n                            }\n\n                            if (s0 === peg$FAILED) {\n                              if (peg$c24.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s0 = peg$FAILED;\n\n                                if (peg$silentFails === 0) {\n                                  peg$fail(peg$c25);\n                                }\n                              }\n\n                              if (s0 === peg$FAILED) {\n                                if (peg$c26.test(input.charAt(peg$currPos))) {\n                                  s0 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s0 = peg$FAILED;\n\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$c27);\n                                  }\n                                }\n\n                                if (s0 === peg$FAILED) {\n                                  if (peg$c28.test(input.charAt(peg$currPos))) {\n                                    s0 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s0 = peg$FAILED;\n\n                                    if (peg$silentFails === 0) {\n                                      peg$fail(peg$c29);\n                                    }\n                                  }\n\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n\n                                    if (peg$c31.test(input.charAt(peg$currPos))) {\n                                      s1 = input.charAt(peg$currPos);\n                                      peg$currPos++;\n                                    } else {\n                                      s1 = peg$FAILED;\n\n                                      if (peg$silentFails === 0) {\n                                        peg$fail(peg$c32);\n                                      }\n                                    }\n\n                                    if (s1 !== peg$FAILED) {\n                                      if (peg$c33.test(input.charAt(peg$currPos))) {\n                                        s2 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                      } else {\n                                        s2 = peg$FAILED;\n\n                                        if (peg$silentFails === 0) {\n                                          peg$fail(peg$c34);\n                                        }\n                                      }\n\n                                      if (s2 !== peg$FAILED) {\n                                        s1 = [s1, s2];\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c30;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c30;\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNameChar() {\n      var s0;\n      s0 = peg$parseNameStartChar();\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c35;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c36);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s0 = peg$c37;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c38);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (peg$c39.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c40);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 183) {\n                s0 = peg$c41;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c42);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (peg$c43.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c44);\n                  }\n                }\n\n                if (s0 === peg$FAILED) {\n                  if (peg$c45.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c46);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseName() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$parseNameStartChar();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseNameChar();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseNameChar();\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c30;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c30;\n      }\n\n      return s0;\n    }\n\n    function peg$parseQName() {\n      var s0;\n      s0 = peg$parsePrefixedName();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNCName();\n      }\n\n      return s0;\n    }\n\n    function peg$parsePrefixedName() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$parseNCName();\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s2 = peg$c0;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c1);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNCName();\n\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c30;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c30;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c30;\n      }\n\n      return s0;\n    }\n\n    function peg$parseNCNameStartChar() {\n      var s0, s1, s2;\n\n      if (peg$c2.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c3);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 95) {\n          s0 = peg$c4;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (peg$c6.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c7);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (peg$c8.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c9);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (peg$c10.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c11);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (peg$c12.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c13);\n                  }\n                }\n\n                if (s0 === peg$FAILED) {\n                  if (peg$c14.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c15);\n                    }\n                  }\n\n                  if (s0 === peg$FAILED) {\n                    if (peg$c16.test(input.charAt(peg$currPos))) {\n                      s0 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s0 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c17);\n                      }\n                    }\n\n                    if (s0 === peg$FAILED) {\n                      if (peg$c18.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s0 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c19);\n                        }\n                      }\n\n                      if (s0 === peg$FAILED) {\n                        if (peg$c20.test(input.charAt(peg$currPos))) {\n                          s0 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s0 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c21);\n                          }\n                        }\n\n                        if (s0 === peg$FAILED) {\n                          if (peg$c22.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s0 = peg$FAILED;\n\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$c23);\n                            }\n                          }\n\n                          if (s0 === peg$FAILED) {\n                            if (peg$c24.test(input.charAt(peg$currPos))) {\n                              s0 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s0 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c25);\n                              }\n                            }\n\n                            if (s0 === peg$FAILED) {\n                              if (peg$c26.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s0 = peg$FAILED;\n\n                                if (peg$silentFails === 0) {\n                                  peg$fail(peg$c27);\n                                }\n                              }\n\n                              if (s0 === peg$FAILED) {\n                                if (peg$c28.test(input.charAt(peg$currPos))) {\n                                  s0 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s0 = peg$FAILED;\n\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$c29);\n                                  }\n                                }\n\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$currPos;\n\n                                  if (peg$c31.test(input.charAt(peg$currPos))) {\n                                    s1 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s1 = peg$FAILED;\n\n                                    if (peg$silentFails === 0) {\n                                      peg$fail(peg$c32);\n                                    }\n                                  }\n\n                                  if (s1 !== peg$FAILED) {\n                                    if (peg$c33.test(input.charAt(peg$currPos))) {\n                                      s2 = input.charAt(peg$currPos);\n                                      peg$currPos++;\n                                    } else {\n                                      s2 = peg$FAILED;\n\n                                      if (peg$silentFails === 0) {\n                                        peg$fail(peg$c34);\n                                      }\n                                    }\n\n                                    if (s2 !== peg$FAILED) {\n                                      s1 = [s1, s2];\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c30;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c30;\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNCNameChar() {\n      var s0;\n      s0 = peg$parseNCNameStartChar();\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c35;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c36);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s0 = peg$c37;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c38);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (peg$c39.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c40);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 183) {\n                s0 = peg$c41;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c42);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (peg$c43.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c44);\n                  }\n                }\n\n                if (s0 === peg$FAILED) {\n                  if (peg$c45.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c46);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNCName() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$parseNCNameStartChar();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseNCNameChar();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseNCNameChar();\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c30;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c30;\n      }\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({\n          type: \"end\",\n          description: \"end of input\"\n        });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse: parse\n  };\n}();","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/node_modules/xml-name-validator/lib/generated-parser.js"],"names":["module","exports","peg$subclass","child","parent","ctor","constructor","prototype","SyntaxError","message","expected","found","offset","line","column","name","Error","parse","input","options","arguments","length","peg$FAILED","peg$startRuleFunctions","Name","peg$parseName","QName","peg$parseQName","peg$startRuleFunction","peg$c0","peg$c1","type","value","description","peg$c2","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$currPos","peg$reportedPos","peg$cachedPos","peg$cachedPosDetails","seenCR","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","text","substring","peg$computePosDetails","peg$buildException","error","pos","advance","details","startPos","endPos","p","ch","charAt","peg$fail","push","cleanupExpected","i","sort","a","b","splice","buildMessage","stringEscape","s","hex","charCodeAt","toString","toUpperCase","replace","expectedDescs","Array","expectedDesc","foundDesc","slice","join","posDetails","peg$parseNameStartChar","s0","s1","s2","test","peg$parseNameChar","s3","peg$parsePrefixedName","peg$parseNCName","peg$parseNCNameStartChar","peg$parseNCNameChar"],"mappings":"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","sourcesContent":["module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { Name: peg$parseName, QName: peg$parseQName },\n        peg$startRuleFunction  = peg$parseName,\n\n        peg$c0 = \":\",\n        peg$c1 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c2 = /^[A-Z]/,\n        peg$c3 = { type: \"class\", value: \"[A-Z]\", description: \"[A-Z]\" },\n        peg$c4 = \"_\",\n        peg$c5 = { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n        peg$c6 = /^[a-z]/,\n        peg$c7 = { type: \"class\", value: \"[a-z]\", description: \"[a-z]\" },\n        peg$c8 = /^[\\xC0-\\xD6]/,\n        peg$c9 = { type: \"class\", value: \"[\\\\xC0-\\\\xD6]\", description: \"[\\\\xC0-\\\\xD6]\" },\n        peg$c10 = /^[\\xD8-\\xF6]/,\n        peg$c11 = { type: \"class\", value: \"[\\\\xD8-\\\\xF6]\", description: \"[\\\\xD8-\\\\xF6]\" },\n        peg$c12 = /^[\\xF8-\\u02FF]/,\n        peg$c13 = { type: \"class\", value: \"[\\\\xF8-\\\\u02FF]\", description: \"[\\\\xF8-\\\\u02FF]\" },\n        peg$c14 = /^[\\u0370-\\u037D]/,\n        peg$c15 = { type: \"class\", value: \"[\\\\u0370-\\\\u037D]\", description: \"[\\\\u0370-\\\\u037D]\" },\n        peg$c16 = /^[\\u037F-\\u1FFF]/,\n        peg$c17 = { type: \"class\", value: \"[\\\\u037F-\\\\u1FFF]\", description: \"[\\\\u037F-\\\\u1FFF]\" },\n        peg$c18 = /^[\\u200C-\\u200D]/,\n        peg$c19 = { type: \"class\", value: \"[\\\\u200C-\\\\u200D]\", description: \"[\\\\u200C-\\\\u200D]\" },\n        peg$c20 = /^[\\u2070-\\u218F]/,\n        peg$c21 = { type: \"class\", value: \"[\\\\u2070-\\\\u218F]\", description: \"[\\\\u2070-\\\\u218F]\" },\n        peg$c22 = /^[\\u2C00-\\u2FEF]/,\n        peg$c23 = { type: \"class\", value: \"[\\\\u2C00-\\\\u2FEF]\", description: \"[\\\\u2C00-\\\\u2FEF]\" },\n        peg$c24 = /^[\\u3001-\\uD7FF]/,\n        peg$c25 = { type: \"class\", value: \"[\\\\u3001-\\\\uD7FF]\", description: \"[\\\\u3001-\\\\uD7FF]\" },\n        peg$c26 = /^[\\uF900-\\uFDCF]/,\n        peg$c27 = { type: \"class\", value: \"[\\\\uF900-\\\\uFDCF]\", description: \"[\\\\uF900-\\\\uFDCF]\" },\n        peg$c28 = /^[\\uFDF0-\\uFFFD]/,\n        peg$c29 = { type: \"class\", value: \"[\\\\uFDF0-\\\\uFFFD]\", description: \"[\\\\uFDF0-\\\\uFFFD]\" },\n        peg$c30 = peg$FAILED,\n        peg$c31 = /^[\\uD800-\\uDB7F]/,\n        peg$c32 = { type: \"class\", value: \"[\\\\uD800-\\\\uDB7F]\", description: \"[\\\\uD800-\\\\uDB7F]\" },\n        peg$c33 = /^[\\uDC00-\\uDFFF]/,\n        peg$c34 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDFFF]\", description: \"[\\\\uDC00-\\\\uDFFF]\" },\n        peg$c35 = \"-\",\n        peg$c36 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c37 = \".\",\n        peg$c38 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c41 = \"\\xB7\",\n        peg$c42 = { type: \"literal\", value: \"\\xB7\", description: \"\\\"\\\\xB7\\\"\" },\n        peg$c43 = /^[\\u0300-\\u036F]/,\n        peg$c44 = { type: \"class\", value: \"[\\\\u0300-\\\\u036F]\", description: \"[\\\\u0300-\\\\u036F]\" },\n        peg$c45 = /^[\\u203F-\\u2040]/,\n        peg$c46 = { type: \"class\", value: \"[\\\\u203F-\\\\u2040]\", description: \"[\\\\u203F-\\\\u2040]\" },\n        peg$c47 = [],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseNameStartChar() {\n      var s0, s1, s2;\n\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s0 = peg$c0;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1); }\n      }\n      if (s0 === peg$FAILED) {\n        if (peg$c2.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 95) {\n            s0 = peg$c4;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c5); }\n          }\n          if (s0 === peg$FAILED) {\n            if (peg$c6.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c7); }\n            }\n            if (s0 === peg$FAILED) {\n              if (peg$c8.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c9); }\n              }\n              if (s0 === peg$FAILED) {\n                if (peg$c10.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (peg$c12.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (peg$c14.test(input.charAt(peg$currPos))) {\n                      s0 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (peg$c16.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (peg$c18.test(input.charAt(peg$currPos))) {\n                          s0 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (peg$c20.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (peg$c22.test(input.charAt(peg$currPos))) {\n                              s0 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c23); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (peg$c24.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c25); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (peg$c26.test(input.charAt(peg$currPos))) {\n                                  s0 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (peg$c28.test(input.charAt(peg$currPos))) {\n                                    s0 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c29); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    if (peg$c31.test(input.charAt(peg$currPos))) {\n                                      s1 = input.charAt(peg$currPos);\n                                      peg$currPos++;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                                    }\n                                    if (s1 !== peg$FAILED) {\n                                      if (peg$c33.test(input.charAt(peg$currPos))) {\n                                        s2 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                      } else {\n                                        s2 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                      }\n                                      if (s2 !== peg$FAILED) {\n                                        s1 = [s1, s2];\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c30;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c30;\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNameChar() {\n      var s0;\n\n      s0 = peg$parseNameStartChar();\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c35;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s0 = peg$c37;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c38); }\n          }\n          if (s0 === peg$FAILED) {\n            if (peg$c39.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c40); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 183) {\n                s0 = peg$c41;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c42); }\n              }\n              if (s0 === peg$FAILED) {\n                if (peg$c43.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c44); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (peg$c45.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseName() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseNameStartChar();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseNameChar();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseNameChar();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c30;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c30;\n      }\n\n      return s0;\n    }\n\n    function peg$parseQName() {\n      var s0;\n\n      s0 = peg$parsePrefixedName();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNCName();\n      }\n\n      return s0;\n    }\n\n    function peg$parsePrefixedName() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseNCName();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s2 = peg$c0;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNCName();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c30;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c30;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c30;\n      }\n\n      return s0;\n    }\n\n    function peg$parseNCNameStartChar() {\n      var s0, s1, s2;\n\n      if (peg$c2.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 95) {\n          s0 = peg$c4;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s0 === peg$FAILED) {\n          if (peg$c6.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c7); }\n          }\n          if (s0 === peg$FAILED) {\n            if (peg$c8.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c9); }\n            }\n            if (s0 === peg$FAILED) {\n              if (peg$c10.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c11); }\n              }\n              if (s0 === peg$FAILED) {\n                if (peg$c12.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (peg$c14.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (peg$c16.test(input.charAt(peg$currPos))) {\n                      s0 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (peg$c18.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (peg$c20.test(input.charAt(peg$currPos))) {\n                          s0 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (peg$c22.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (peg$c24.test(input.charAt(peg$currPos))) {\n                              s0 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (peg$c26.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (peg$c28.test(input.charAt(peg$currPos))) {\n                                  s0 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c29); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$currPos;\n                                  if (peg$c31.test(input.charAt(peg$currPos))) {\n                                    s1 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                                  }\n                                  if (s1 !== peg$FAILED) {\n                                    if (peg$c33.test(input.charAt(peg$currPos))) {\n                                      s2 = input.charAt(peg$currPos);\n                                      peg$currPos++;\n                                    } else {\n                                      s2 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                    }\n                                    if (s2 !== peg$FAILED) {\n                                      s1 = [s1, s2];\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c30;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c30;\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNCNameChar() {\n      var s0;\n\n      s0 = peg$parseNCNameStartChar();\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c35;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s0 = peg$c37;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c38); }\n          }\n          if (s0 === peg$FAILED) {\n            if (peg$c39.test(input.charAt(peg$currPos))) {\n              s0 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c40); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 183) {\n                s0 = peg$c41;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c42); }\n              }\n              if (s0 === peg$FAILED) {\n                if (peg$c43.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c44); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (peg$c45.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNCName() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseNCNameStartChar();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseNCNameChar();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseNCNameChar();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c30;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c30;\n      }\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})()"]},"metadata":{},"sourceType":"script"}