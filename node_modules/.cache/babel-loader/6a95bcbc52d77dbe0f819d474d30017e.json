{"ast":null,"code":"/*********************************************************************\n * These are commonly used parsers for CSS Values they take a string *\n * to parse and return a string after it's been converted, if needed *\n ********************************************************************/\n'use strict';\n\nexports.TYPES = {\n  INTEGER: 1,\n  NUMBER: 2,\n  LENGTH: 3,\n  PERCENT: 4,\n  URL: 5,\n  COLOR: 6,\n  STRING: 7,\n  ANGLE: 8,\n  KEYWORD: 9,\n  NULL_OR_EMPTY_STR: 10\n};\n/*jslint regexp: true*/\n// rough regular expressions\n\nvar integerRegEx = /^[\\-+]?[0-9]+$/;\nvar numberRegEx = /^[\\-+]?[0-9]*\\.[0-9]+$/;\nvar lengthRegEx = /^(0|[\\-+]?[0-9]*\\.?[0-9]+(in|cm|em|mm|pt|pc|px))$/;\nvar percentRegEx = /^[\\-+]?[0-9]*\\.?[0-9]+%$/;\nvar urlRegEx = /^url\\(\\s*([^\\)]*)\\s*\\)$/;\nvar stringRegEx = /^(\\\"[^\\\"]*\\\"|\\'[^\\']*\\')$/;\nvar colorRegEx1 = /^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])?$/;\nvar colorRegEx2 = /^rgb\\(([^\\)]*)\\)$/;\nvar colorRegEx3 = /^rgba\\(([^\\)]*)\\)$/;\nvar angleRegEx = /^([\\-+]?[0-9]*\\.?[0-9]+)(deg|grad|rad)$/;\n/*jslint regexp: false*/\n// This will return one of the above types based on the passed in string\n\nexports.valueType = function valueType(val) {\n  if (val === '' || val === null) {\n    return exports.TYPES.NULL_OR_EMPTY_STR;\n  }\n\n  if (typeof val === 'number') {\n    val = val.toString();\n  }\n\n  if (typeof val !== 'string') {\n    return undefined;\n  }\n\n  if (integerRegEx.test(val)) {\n    return exports.TYPES.INTEGER;\n  }\n\n  if (numberRegEx.test(val)) {\n    return exports.TYPES.NUMBER;\n  }\n\n  if (lengthRegEx.test(val)) {\n    return exports.TYPES.LENGTH;\n  }\n\n  if (percentRegEx.test(val)) {\n    return exports.TYPES.PERCENT;\n  }\n\n  if (urlRegEx.test(val)) {\n    return exports.TYPES.URL;\n  }\n\n  if (stringRegEx.test(val)) {\n    return exports.TYPES.STRING;\n  }\n\n  if (angleRegEx.test(val)) {\n    return exports.TYPES.ANGLE;\n  }\n\n  if (colorRegEx1.test(val)) {\n    return exports.TYPES.COLOR;\n  }\n\n  var res = colorRegEx2.exec(val);\n  var parts;\n\n  if (res !== null) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 3) {\n      return undefined;\n    }\n\n    if (parts.every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {\n      return exports.TYPES.COLOR;\n    }\n\n    return undefined;\n  }\n\n  res = colorRegEx3.exec(val);\n\n  if (res !== null) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 4) {\n      return undefined;\n    }\n\n    if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {\n      if (numberRegEx.test(parts[3])) {\n        return exports.TYPES.COLOR;\n      }\n    }\n\n    return undefined;\n  } // could still be a color, one of the standard keyword colors\n\n\n  val = val.toLowerCase();\n\n  switch (val) {\n    case 'maroon':\n    case 'red':\n    case 'orange':\n    case 'yellow':\n    case 'olive':\n    case 'purple':\n    case 'fuchsia':\n    case 'white':\n    case 'lime':\n    case 'green':\n    case 'navy':\n    case 'blue':\n    case 'aqua':\n    case 'teal':\n    case 'black':\n    case 'silver':\n    case 'gray': // the following are deprecated in CSS3\n\n    case 'activeborder':\n    case 'activecaption':\n    case 'appworkspace':\n    case 'background':\n    case 'buttonface':\n    case 'buttonhighlight':\n    case 'buttonshadow':\n    case 'buttontext':\n    case 'captiontext':\n    case 'graytext':\n    case 'highlight':\n    case 'highlighttext':\n    case 'inactiveborder':\n    case 'inactivecaption':\n    case 'inactivecaptiontext':\n    case 'infobackground':\n    case 'infotext':\n    case 'menu':\n    case 'menutext':\n    case 'scrollbar':\n    case 'threeddarkshadow':\n    case 'threedface':\n    case 'threedhighlight':\n    case 'threedlightshadow':\n    case 'threedshadow':\n    case 'window':\n    case 'windowframe':\n    case 'windowtext':\n      return exports.TYPES.COLOR;\n\n    default:\n      return exports.TYPES.KEYWORD;\n  }\n};\n\nexports.parseInteger = function parseInteger(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.INTEGER) {\n    return undefined;\n  }\n\n  return String(parseInt(val, 10));\n};\n\nexports.parseNumber = function parseNumber(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.NUMBER && type !== exports.TYPES.INTEGER) {\n    return undefined;\n  }\n\n  return String(parseFloat(val));\n};\n\nexports.parseLength = function parseLength(val) {\n  if (val === 0 || val === '0') {\n    return '0px';\n  }\n\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.LENGTH) {\n    return undefined;\n  }\n\n  return val;\n};\n\nexports.parsePercent = function parsePercent(val) {\n  if (val === 0 || val === '0') {\n    return '0%';\n  }\n\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.PERCENT) {\n    return undefined;\n  }\n\n  return val;\n}; // either a length or a percent\n\n\nexports.parseMeasurement = function parseMeasurement(val) {\n  var length = exports.parseLength(val);\n\n  if (length !== undefined) {\n    return length;\n  }\n\n  return exports.parsePercent(val);\n};\n\nexports.parseUrl = function parseUrl(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  var res = urlRegEx.exec(val); // does it match the regex?\n\n  if (!res) {\n    return undefined;\n  }\n\n  var str = res[1]; // if it starts with single or double quotes, does it end with the same?\n\n  if ((str[0] === '\"' || str[0] === \"'\") && str[0] !== str[str.length - 1]) {\n    return undefined;\n  }\n\n  if (str[0] === '\"' || str[0] === \"'\") {\n    str = str.substr(1, str.length - 2);\n  }\n\n  var i;\n\n  for (i = 0; i < str.length; i++) {\n    switch (str[i]) {\n      case '(':\n      case ')':\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case \"'\":\n      case '\"':\n        return undefined;\n\n      case '\\\\':\n        i++;\n        break;\n    }\n  }\n\n  return 'url(' + str + ')';\n};\n\nexports.parseString = function parseString(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.STRING) {\n    return undefined;\n  }\n\n  var i;\n\n  for (i = 1; i < val.length - 1; i++) {\n    switch (val[i]) {\n      case val[0]:\n        return undefined;\n\n      case '\\\\':\n        i++;\n\n        while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {\n          i++;\n        }\n\n        break;\n    }\n  }\n\n  if (i >= val.length) {\n    return undefined;\n  }\n\n  return val;\n};\n\nexports.parseColor = function parseColor(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  var red,\n      green,\n      blue,\n      alpha = 1;\n  var parts;\n  var res = colorRegEx1.exec(val); // is it #aaa or #ababab\n\n  if (res) {\n    var hex = val.substr(1);\n\n    if (hex.length === 3) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n\n    red = parseInt(hex.substr(0, 2), 16);\n    green = parseInt(hex.substr(2, 2), 16);\n    blue = parseInt(hex.substr(4, 2), 16);\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  }\n\n  res = colorRegEx2.exec(val);\n\n  if (res) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 3) {\n      return undefined;\n    }\n\n    if (parts.every(percentRegEx.test.bind(percentRegEx))) {\n      red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);\n      green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);\n      blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);\n    } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {\n      red = parseInt(parts[0], 10);\n      green = parseInt(parts[1], 10);\n      blue = parseInt(parts[2], 10);\n    } else {\n      return undefined;\n    }\n\n    red = Math.min(255, Math.max(0, red));\n    green = Math.min(255, Math.max(0, green));\n    blue = Math.min(255, Math.max(0, blue));\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  }\n\n  res = colorRegEx3.exec(val);\n\n  if (res) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 4) {\n      return undefined;\n    }\n\n    if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {\n      red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);\n      green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);\n      blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);\n      alpha = parseFloat(parts[3]);\n    } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {\n      red = parseInt(parts[0], 10);\n      green = parseInt(parts[1], 10);\n      blue = parseInt(parts[2], 10);\n      alpha = parseFloat(parts[3]);\n    } else {\n      return undefined;\n    }\n\n    if (isNaN(alpha)) {\n      alpha = 1;\n    }\n\n    red = Math.min(255, Math.max(0, red));\n    green = Math.min(255, Math.max(0, green));\n    blue = Math.min(255, Math.max(0, blue));\n    alpha = Math.min(1, Math.max(0, alpha));\n\n    if (alpha === 1) {\n      return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n    }\n\n    return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';\n  }\n\n  if (type === exports.TYPES.COLOR) {\n    return val;\n  }\n\n  return undefined;\n};\n\nexports.parseAngle = function parseAngle(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.ANGLE) {\n    return undefined;\n  }\n\n  var res = angleRegEx.exec(val);\n  var flt = parseFloat(res[1]);\n\n  if (res[2] === 'rad') {\n    flt *= 180 / Math.PI;\n  } else if (res[2] === 'grad') {\n    flt *= 360 / 400;\n  }\n\n  while (flt < 0) {\n    flt += 360;\n  }\n\n  while (flt > 360) {\n    flt -= 360;\n  }\n\n  return flt + 'deg';\n};\n\nexports.parseKeyword = function parseKeyword(val, valid_keywords) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.KEYWORD) {\n    return undefined;\n  }\n\n  val = val.toString().toLowerCase();\n  var i;\n\n  for (i = 0; i < valid_keywords.length; i++) {\n    if (valid_keywords[i].toLowerCase() === val) {\n      return valid_keywords[i];\n    }\n  }\n\n  return undefined;\n}; // utility to translate from border-width to borderWidth\n\n\nvar dashedToCamelCase = function (dashed) {\n  var i;\n  var camel = '';\n  var nextCap = false;\n\n  for (i = 0; i < dashed.length; i++) {\n    if (dashed[i] !== '-') {\n      camel += nextCap ? dashed[i].toUpperCase() : dashed[i];\n      nextCap = false;\n    } else {\n      nextCap = true;\n    }\n  }\n\n  return camel;\n};\n\nexports.dashedToCamelCase = dashedToCamelCase;\nvar is_space = /\\s/;\nvar opening_deliminators = ['\"', '\\'', '('];\nvar closing_deliminators = ['\"', '\\'', ')']; // this splits on whitespace, but keeps quoted and parened parts together\n\nvar getParts = function (str) {\n  var deliminator_stack = [];\n  var length = str.length;\n  var i;\n  var parts = [];\n  var current_part = '';\n  var opening_index;\n  var closing_index;\n\n  for (i = 0; i < length; i++) {\n    opening_index = opening_deliminators.indexOf(str[i]);\n    closing_index = closing_deliminators.indexOf(str[i]);\n\n    if (is_space.test(str[i])) {\n      if (deliminator_stack.length === 0) {\n        if (current_part !== '') {\n          parts.push(current_part);\n        }\n\n        current_part = '';\n      } else {\n        current_part += str[i];\n      }\n    } else {\n      if (str[i] === '\\\\') {\n        i++;\n        current_part += str[i];\n      } else {\n        current_part += str[i];\n\n        if (closing_index !== -1 && closing_index === deliminator_stack[deliminator_stack.length - 1]) {\n          deliminator_stack.pop();\n        } else if (opening_index !== -1) {\n          deliminator_stack.push(opening_index);\n        }\n      }\n    }\n  }\n\n  if (current_part !== '') {\n    parts.push(current_part);\n  }\n\n  return parts;\n};\n/*\n * this either returns undefined meaning that it isn't valid\n * or returns an object where the keys are dashed short\n * hand properties and the values are the values to set\n * on them\n */\n\n\nexports.shorthandParser = function parse(v, shorthand_for) {\n  var obj = {};\n  var type = exports.valueType(v);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    Object.keys(shorthand_for).forEach(function (property) {\n      obj[property] = '';\n    });\n    return obj;\n  }\n\n  if (typeof v === 'number') {\n    v = v.toString();\n  }\n\n  if (typeof v !== 'string') {\n    return undefined;\n  }\n\n  if (v.toLowerCase() === 'inherit') {\n    return {};\n  }\n\n  var parts = getParts(v);\n  var valid = true;\n  parts.forEach(function (part) {\n    var part_valid = false;\n    Object.keys(shorthand_for).forEach(function (property) {\n      if (shorthand_for[property].isValid(part)) {\n        part_valid = true;\n        obj[property] = part;\n      }\n    });\n    valid = valid && part_valid;\n  });\n\n  if (!valid) {\n    return undefined;\n  }\n\n  return obj;\n};\n\nexports.shorthandSetter = function (property, shorthand_for) {\n  return function (v) {\n    var obj = exports.shorthandParser(v, shorthand_for);\n\n    if (obj === undefined) {\n      return;\n    } //console.log('shorthandSetter for:', property, 'obj:', obj);\n\n\n    Object.keys(obj).forEach(function (subprop) {\n      // in case subprop is an implicit property, this will clear\n      // *its* subpropertiesX\n      var camel = dashedToCamelCase(subprop);\n      this[camel] = obj[subprop]; // in case it gets translated into something else (0 -> 0px)\n\n      obj[subprop] = this[camel];\n      this.removeProperty(subprop); // don't add in empty properties\n\n      if (obj[subprop] !== '') {\n        this._values[subprop] = obj[subprop];\n      }\n    }, this);\n    Object.keys(shorthand_for).forEach(function (subprop) {\n      if (!obj.hasOwnProperty(subprop)) {\n        this.removeProperty(subprop);\n        delete this._values[subprop];\n      }\n    }, this); // in case the value is something like 'none' that removes all values,\n    // check that the generated one is not empty, first remove the property\n    // if it already exists, then call the shorthandGetter, if it's an empty\n    // string, don't set the property\n\n    this.removeProperty(property);\n    var calculated = exports.shorthandGetter(property, shorthand_for).call(this);\n\n    if (calculated !== '') {\n      this._setProperty(property, calculated);\n    }\n  };\n};\n\nexports.shorthandGetter = function (property, shorthand_for) {\n  return function () {\n    if (this._values[property] !== undefined) {\n      return this.getPropertyValue(property);\n    }\n\n    return Object.keys(shorthand_for).map(function (subprop) {\n      return this.getPropertyValue(subprop);\n    }, this).filter(function (value) {\n      return value !== '';\n    }).join(' ');\n  };\n}; // isValid(){1,4} | inherit\n// if one, it applies to all\n// if two, the first applies to the top and bottom, and the second to left and right\n// if three, the first applies to the top, the second to left and right, the third bottom\n// if four, top, right, bottom, left\n\n\nexports.implicitSetter = function (property_before, property_after, isValid, parser) {\n  property_after = property_after || '';\n\n  if (property_after !== '') {\n    property_after = '-' + property_after;\n  }\n\n  var part_names = [\"top\", \"right\", \"bottom\", \"left\"];\n  return function (v) {\n    if (typeof v === 'number') {\n      v = v.toString();\n    }\n\n    if (typeof v !== 'string') {\n      return undefined;\n    }\n\n    var parts;\n\n    if (v.toLowerCase() === 'inherit' || v === '') {\n      parts = [v];\n    } else {\n      parts = getParts(v);\n    }\n\n    if (parts.length < 1 || parts.length > 4) {\n      return undefined;\n    }\n\n    if (!parts.every(isValid)) {\n      return undefined;\n    }\n\n    parts = parts.map(function (part) {\n      return parser(part);\n    });\n\n    this._setProperty(property_before + property_after, parts.join(' '));\n\n    if (parts.length === 1) {\n      parts[1] = parts[0];\n    }\n\n    if (parts.length === 2) {\n      parts[2] = parts[0];\n    }\n\n    if (parts.length === 3) {\n      parts[3] = parts[1];\n    }\n\n    for (var i = 0; i < 4; i++) {\n      var property = property_before + \"-\" + part_names[i] + property_after;\n      this.removeProperty(property);\n\n      if (parts[i] !== '') {\n        this._values[property] = parts[i];\n      }\n    }\n\n    return v;\n  };\n}; //\n//  Companion to implicitSetter, but for the individual parts.\n//  This sets the individual value, and checks to see if all four\n//  sub-parts are set.  If so, it sets the shorthand version and removes\n//  the individual parts from the cssText.\n//\n\n\nexports.subImplicitSetter = function (prefix, part, isValid, parser) {\n  var property = prefix + '-' + part;\n  var subparts = [prefix + \"-top\", prefix + \"-right\", prefix + \"-bottom\", prefix + \"-left\"];\n  return function (v) {\n    if (typeof v === 'number') {\n      v = v.toString();\n    }\n\n    if (typeof v !== 'string') {\n      return undefined;\n    }\n\n    if (!isValid(v)) {\n      return undefined;\n    }\n\n    v = parser(v);\n\n    this._setProperty(property, v);\n\n    var parts = [];\n\n    for (var i = 0; i < 4; i++) {\n      if (this._values[subparts[i]] == null || this._values[subparts[i]] === '') {\n        break;\n      }\n\n      parts.push(this._values[subparts[i]]);\n    }\n\n    if (parts.length === 4) {\n      for (i = 0; i < 4; i++) {\n        this.removeProperty(subparts[i]);\n        this._values[subparts[i]] = parts[i];\n      }\n\n      this._setProperty(prefix, parts.join(\" \"));\n    }\n\n    return v;\n  };\n};\n\nvar camel_to_dashed = /[A-Z]/g;\n/*jslint regexp: true*/\n\nvar first_segment = /^\\([^\\-]\\)-/;\n/*jslint regexp: false*/\n\nvar vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];\n\nexports.camelToDashed = function (camel_case) {\n  var match;\n  var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();\n  match = dashed.match(first_segment);\n\n  if (match && vendor_prefixes.indexOf(match[1]) !== -1) {\n    dashed = '-' + dashed;\n  }\n\n  return dashed;\n};","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/node_modules/cssstyle/lib/parsers.js"],"names":["exports","TYPES","INTEGER","NUMBER","LENGTH","PERCENT","URL","COLOR","STRING","ANGLE","KEYWORD","NULL_OR_EMPTY_STR","integerRegEx","numberRegEx","lengthRegEx","percentRegEx","urlRegEx","stringRegEx","colorRegEx1","colorRegEx2","colorRegEx3","angleRegEx","valueType","val","toString","undefined","test","res","exec","parts","split","length","every","bind","slice","toLowerCase","parseInteger","type","String","parseInt","parseNumber","parseFloat","parseLength","parsePercent","parseMeasurement","parseUrl","str","substr","i","parseString","parseColor","red","green","blue","alpha","hex","Math","floor","min","max","isNaN","parseAngle","flt","PI","parseKeyword","valid_keywords","dashedToCamelCase","dashed","camel","nextCap","toUpperCase","is_space","opening_deliminators","closing_deliminators","getParts","deliminator_stack","current_part","opening_index","closing_index","indexOf","push","pop","shorthandParser","parse","v","shorthand_for","obj","Object","keys","forEach","property","valid","part","part_valid","isValid","shorthandSetter","subprop","removeProperty","_values","hasOwnProperty","calculated","shorthandGetter","call","_setProperty","getPropertyValue","map","filter","value","join","implicitSetter","property_before","property_after","parser","part_names","subImplicitSetter","prefix","subparts","camel_to_dashed","first_segment","vendor_prefixes","camelToDashed","camel_case","match","replace"],"mappings":"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","sourcesContent":["/*********************************************************************\n * These are commonly used parsers for CSS Values they take a string *\n * to parse and return a string after it's been converted, if needed *\n ********************************************************************/\n'use strict';\n\nexports.TYPES = {\n    INTEGER: 1,\n    NUMBER: 2,\n    LENGTH: 3,\n    PERCENT: 4,\n    URL: 5,\n    COLOR: 6,\n    STRING: 7,\n    ANGLE: 8,\n    KEYWORD: 9,\n    NULL_OR_EMPTY_STR: 10\n};\n\n/*jslint regexp: true*/\n// rough regular expressions\nvar integerRegEx = /^[\\-+]?[0-9]+$/;\nvar numberRegEx = /^[\\-+]?[0-9]*\\.[0-9]+$/;\nvar lengthRegEx = /^(0|[\\-+]?[0-9]*\\.?[0-9]+(in|cm|em|mm|pt|pc|px))$/;\nvar percentRegEx = /^[\\-+]?[0-9]*\\.?[0-9]+%$/;\nvar urlRegEx = /^url\\(\\s*([^\\)]*)\\s*\\)$/;\nvar stringRegEx = /^(\\\"[^\\\"]*\\\"|\\'[^\\']*\\')$/;\nvar colorRegEx1 = /^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])?$/;\nvar colorRegEx2 = /^rgb\\(([^\\)]*)\\)$/;\nvar colorRegEx3 = /^rgba\\(([^\\)]*)\\)$/;\nvar angleRegEx = /^([\\-+]?[0-9]*\\.?[0-9]+)(deg|grad|rad)$/;\n/*jslint regexp: false*/\n\n// This will return one of the above types based on the passed in string\nexports.valueType = function valueType(val) {\n    if (val === '' || val === null) {\n        return exports.TYPES.NULL_OR_EMPTY_STR;\n    }\n    if (typeof val === 'number') {\n        val = val.toString();\n    }\n\n    if (typeof val !== 'string') {\n        return undefined;\n    }\n\n    if (integerRegEx.test(val)) {\n        return exports.TYPES.INTEGER;\n    }\n    if (numberRegEx.test(val)) {\n        return exports.TYPES.NUMBER;\n    }\n    if (lengthRegEx.test(val)) {\n        return exports.TYPES.LENGTH;\n    }\n    if (percentRegEx.test(val)) {\n        return exports.TYPES.PERCENT;\n    }\n    if (urlRegEx.test(val)) {\n        return exports.TYPES.URL;\n    }\n    if (stringRegEx.test(val)) {\n        return exports.TYPES.STRING;\n    }\n    if (angleRegEx.test(val)) {\n        return exports.TYPES.ANGLE;\n    }\n    if (colorRegEx1.test(val)) {\n        return exports.TYPES.COLOR;\n    }\n    var res = colorRegEx2.exec(val);\n    var parts;\n    if (res !== null) {\n        parts = res[1].split(/\\s*,\\s*/);\n        if (parts.length !== 3) {\n            return undefined;\n        }\n        if (parts.every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {\n            return exports.TYPES.COLOR;\n        }\n        return undefined;\n    }\n    res = colorRegEx3.exec(val);\n    if (res !== null) {\n        parts = res[1].split(/\\s*,\\s*/);\n        if (parts.length !== 4) {\n            return undefined;\n        }\n        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {\n            if (numberRegEx.test(parts[3])) {\n                return exports.TYPES.COLOR;\n            }\n        }\n        return undefined;\n    }\n\n    // could still be a color, one of the standard keyword colors\n    val = val.toLowerCase();\n    switch (val) {\n    case 'maroon':\n    case 'red':\n    case 'orange':\n    case 'yellow':\n    case 'olive':\n    case 'purple':\n    case 'fuchsia':\n    case 'white':\n    case 'lime':\n    case 'green':\n    case 'navy':\n    case 'blue':\n    case 'aqua':\n    case 'teal':\n    case 'black':\n    case 'silver':\n    case 'gray':\n        // the following are deprecated in CSS3\n    case 'activeborder':\n    case 'activecaption':\n    case 'appworkspace':\n    case 'background':\n    case 'buttonface':\n    case 'buttonhighlight':\n    case 'buttonshadow':\n    case 'buttontext':\n    case 'captiontext':\n    case 'graytext':\n    case 'highlight':\n    case 'highlighttext':\n    case 'inactiveborder':\n    case 'inactivecaption':\n    case 'inactivecaptiontext':\n    case 'infobackground':\n    case 'infotext':\n    case 'menu':\n    case 'menutext':\n    case 'scrollbar':\n    case 'threeddarkshadow':\n    case 'threedface':\n    case 'threedhighlight':\n    case 'threedlightshadow':\n    case 'threedshadow':\n    case 'window':\n    case 'windowframe':\n    case 'windowtext':\n        return exports.TYPES.COLOR;\n    default:\n        return exports.TYPES.KEYWORD;\n    }\n};\n\nexports.parseInteger = function parseInteger(val) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.INTEGER) {\n        return undefined;\n    }\n    return String(parseInt(val, 10));\n};\n\nexports.parseNumber = function parseNumber(val) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.NUMBER && type !== exports.TYPES.INTEGER) {\n        return undefined;\n    }\n    return String(parseFloat(val));\n};\n\nexports.parseLength = function parseLength(val) {\n    if (val === 0 || val === '0') {\n        return '0px';\n    }\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.LENGTH) {\n        return undefined;\n    }\n    return val;\n};\n\nexports.parsePercent = function parsePercent(val) {\n    if (val === 0 || val === '0') {\n        return '0%';\n    }\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.PERCENT) {\n        return undefined;\n    }\n    return val;\n};\n\n// either a length or a percent\nexports.parseMeasurement = function parseMeasurement(val) {\n    var length = exports.parseLength(val);\n    if (length !== undefined) {\n        return length;\n    }\n    return exports.parsePercent(val);\n};\n\nexports.parseUrl = function parseUrl(val) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    var res = urlRegEx.exec(val);\n    // does it match the regex?\n    if (!res) {\n        return undefined;\n    }\n    var str = res[1];\n    // if it starts with single or double quotes, does it end with the same?\n    if ((str[0] === '\"' || str[0] === \"'\") && str[0] !== str[str.length - 1]) {\n        return undefined;\n    }\n    if (str[0] === '\"' || str[0] === \"'\") {\n        str = str.substr(1, str.length - 2);\n    }\n\n    var i;\n    for (i = 0; i < str.length; i++) {\n        switch (str[i]) {\n        case '(':\n        case ')':\n        case ' ':\n        case '\\t':\n        case '\\n':\n        case \"'\":\n        case '\"':\n            return undefined;\n        case '\\\\':\n            i++;\n            break;\n        }\n    }\n\n    return 'url(' + str + ')';\n};\n\nexports.parseString = function parseString(val) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.STRING) {\n        return undefined;\n    }\n    var i;\n    for (i = 1; i < val.length - 1; i++) {\n        switch (val[i]) {\n        case val[0]:\n            return undefined;\n        case '\\\\':\n            i++;\n            while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {\n                i++;\n            }\n            break;\n        }\n    }\n    if (i >= val.length) {\n        return undefined;\n    }\n    return val;\n};\n\nexports.parseColor = function parseColor(val) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    var red, green, blue, alpha = 1;\n    var parts;\n    var res = colorRegEx1.exec(val);\n    // is it #aaa or #ababab\n    if (res) {\n        var hex = val.substr(1);\n        if (hex.length === 3) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        red = parseInt(hex.substr(0, 2), 16);\n        green = parseInt(hex.substr(2, 2), 16);\n        blue = parseInt(hex.substr(4, 2), 16);\n        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n    }\n\n    res = colorRegEx2.exec(val);\n    if (res) {\n        parts = res[1].split(/\\s*,\\s*/);\n        if (parts.length !== 3) {\n            return undefined;\n        }\n        if (parts.every(percentRegEx.test.bind(percentRegEx))) {\n            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);\n            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);\n            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);\n        } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {\n            red = parseInt(parts[0], 10);\n            green = parseInt(parts[1], 10);\n            blue = parseInt(parts[2], 10);\n        } else {\n            return undefined;\n        }\n        red = Math.min(255, Math.max(0, red));\n        green = Math.min(255, Math.max(0, green));\n        blue = Math.min(255, Math.max(0, blue));\n        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n    }\n\n    res = colorRegEx3.exec(val);\n    if (res) {\n        parts = res[1].split(/\\s*,\\s*/);\n        if (parts.length !== 4) {\n            return undefined;\n        }\n        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {\n            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);\n            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);\n            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);\n            alpha = parseFloat(parts[3]);\n        } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {\n            red = parseInt(parts[0], 10);\n            green = parseInt(parts[1], 10);\n            blue = parseInt(parts[2], 10);\n            alpha = parseFloat(parts[3]);\n        } else {\n            return undefined;\n        }\n        if (isNaN(alpha)) {\n            alpha = 1;\n        }\n        red = Math.min(255, Math.max(0, red));\n        green = Math.min(255, Math.max(0, green));\n        blue = Math.min(255, Math.max(0, blue));\n        alpha = Math.min(1, Math.max(0, alpha));\n        if (alpha === 1) {\n            return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n        }\n        return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';\n    }\n\n    if (type === exports.TYPES.COLOR) {\n        return val;\n    }\n    return undefined;\n};\n\nexports.parseAngle = function parseAngle(val) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.ANGLE) {\n        return undefined;\n    }\n    var res = angleRegEx.exec(val);\n    var flt = parseFloat(res[1]);\n    if (res[2] === 'rad') {\n        flt *= 180 / Math.PI;\n    } else if (res[2] === 'grad') {\n        flt *= 360 / 400;\n    }\n\n    while (flt < 0) {\n        flt += 360;\n    }\n    while (flt > 360) {\n        flt -= 360;\n    }\n    return flt + 'deg';\n};\n\nexports.parseKeyword = function parseKeyword(val, valid_keywords) {\n    var type = exports.valueType(val);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        return val;\n    }\n    if (type !== exports.TYPES.KEYWORD) {\n        return undefined;\n    }\n    val = val.toString().toLowerCase();\n    var i;\n    for (i = 0; i < valid_keywords.length; i++) {\n        if (valid_keywords[i].toLowerCase() === val) {\n            return valid_keywords[i];\n        }\n    }\n    return undefined;\n};\n\n// utility to translate from border-width to borderWidth\nvar dashedToCamelCase = function (dashed) {\n    var i;\n    var camel = '';\n    var nextCap = false;\n    for (i = 0; i < dashed.length; i++) {\n        if (dashed[i] !== '-') {\n            camel += nextCap ? dashed[i].toUpperCase() : dashed[i];\n            nextCap = false;\n        } else {\n            nextCap = true;\n        }\n    }\n    return camel;\n};\nexports.dashedToCamelCase = dashedToCamelCase;\n\nvar is_space = /\\s/;\nvar opening_deliminators = ['\"', '\\'', '('];\nvar closing_deliminators = ['\"', '\\'', ')'];\n// this splits on whitespace, but keeps quoted and parened parts together\nvar getParts = function (str) {\n    var deliminator_stack = [];\n    var length = str.length;\n    var i;\n    var parts = [];\n    var current_part = '';\n    var opening_index;\n    var closing_index;\n    for (i = 0; i < length; i++) {\n        opening_index = opening_deliminators.indexOf(str[i]);\n        closing_index = closing_deliminators.indexOf(str[i]);\n        if (is_space.test(str[i])) {\n            if (deliminator_stack.length === 0) {\n                if (current_part !== '') {\n                    parts.push(current_part);\n                }\n                current_part = '';\n            } else {\n                current_part += str[i];\n            }\n        } else {\n            if (str[i] === '\\\\') {\n                i++;\n                current_part += str[i];\n            } else {\n                current_part += str[i];\n                if (closing_index !== -1 && closing_index === deliminator_stack[deliminator_stack.length - 1]) {\n                    deliminator_stack.pop();\n                } else if (opening_index !== -1) {\n                    deliminator_stack.push(opening_index);\n                }\n            }\n        }\n    }\n    if (current_part !== '') {\n        parts.push(current_part);\n    }\n    return parts;\n};\n\n/*\n * this either returns undefined meaning that it isn't valid\n * or returns an object where the keys are dashed short\n * hand properties and the values are the values to set\n * on them\n */\nexports.shorthandParser = function parse(v, shorthand_for) {\n    var obj = {};\n    var type = exports.valueType(v);\n    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n        Object.keys(shorthand_for).forEach(function (property) {\n            obj[property] = '';\n        });\n        return obj;\n    }\n\n    if (typeof v === 'number') {\n        v = v.toString();\n    }\n\n    if (typeof v !== 'string') {\n        return undefined;\n    }\n\n    if (v.toLowerCase() === 'inherit') {\n        return {};\n    }\n    var parts = getParts(v);\n    var valid = true;\n    parts.forEach(function (part) {\n        var part_valid = false;\n        Object.keys(shorthand_for).forEach(function (property) {\n            if (shorthand_for[property].isValid(part)) {\n                part_valid = true;\n                obj[property] = part;\n            }\n        });\n        valid = valid && part_valid;\n    });\n    if (!valid) {\n        return undefined;\n    }\n    return obj;\n};\n\nexports.shorthandSetter = function (property, shorthand_for) {\n    return function (v) {\n        var obj = exports.shorthandParser(v, shorthand_for);\n        if (obj === undefined) {\n            return;\n        }\n        //console.log('shorthandSetter for:', property, 'obj:', obj);\n        Object.keys(obj).forEach(function (subprop) {\n            // in case subprop is an implicit property, this will clear\n            // *its* subpropertiesX\n            var camel = dashedToCamelCase(subprop);\n            this[camel] = obj[subprop];\n            // in case it gets translated into something else (0 -> 0px)\n            obj[subprop] = this[camel];\n            this.removeProperty(subprop);\n            // don't add in empty properties\n            if (obj[subprop] !== '') {\n                this._values[subprop] = obj[subprop];\n            }\n        }, this);\n        Object.keys(shorthand_for).forEach(function (subprop) {\n            if (!obj.hasOwnProperty(subprop)) {\n                this.removeProperty(subprop);\n                delete this._values[subprop];\n            }\n        }, this);\n        // in case the value is something like 'none' that removes all values,\n        // check that the generated one is not empty, first remove the property\n        // if it already exists, then call the shorthandGetter, if it's an empty\n        // string, don't set the property\n        this.removeProperty(property);\n        var calculated = exports.shorthandGetter(property, shorthand_for).call(this);\n        if (calculated !== '') {\n            this._setProperty(property, calculated);\n        }\n    };\n};\n\nexports.shorthandGetter = function (property, shorthand_for) {\n    return function () {\n        if (this._values[property] !== undefined) {\n            return this.getPropertyValue(property);\n        }\n        return Object.keys(shorthand_for).map(function (subprop) {\n            return this.getPropertyValue(subprop);\n        }, this).filter(function (value) {\n            return value !== '';\n        }).join(' ');\n    };\n};\n\n// isValid(){1,4} | inherit\n// if one, it applies to all\n// if two, the first applies to the top and bottom, and the second to left and right\n// if three, the first applies to the top, the second to left and right, the third bottom\n// if four, top, right, bottom, left\nexports.implicitSetter = function (property_before, property_after, isValid, parser) {\n    property_after = property_after || '';\n    if (property_after !== '') {\n        property_after = '-' + property_after;\n    }\n    var part_names = [\"top\",\"right\",\"bottom\",\"left\"];\n\n    return function (v) {\n        if (typeof v === 'number') {\n            v = v.toString();\n        }\n        if (typeof v !== 'string') {\n            return undefined;\n        }\n        var parts;\n        if (v.toLowerCase() === 'inherit' || v === '') {\n            parts = [v];\n        } else {\n            parts = getParts(v);\n        }\n        if (parts.length < 1 || parts.length > 4) {\n            return undefined;\n        }\n\n        if (!parts.every(isValid)) {\n            return undefined;\n        }\n\n        parts = parts.map(function (part) {\n            return parser(part);\n        });\n        this._setProperty(property_before + property_after, parts.join(' '));\n        if (parts.length === 1) {\n            parts[1] = parts[0];\n        }\n        if (parts.length === 2) {\n            parts[2] = parts[0];\n        }\n        if (parts.length === 3) {\n            parts[3] = parts[1];\n        }\n\n        for (var i = 0; i < 4; i++) {\n            var property = property_before + \"-\" + part_names[i] + property_after;\n            this.removeProperty(property);\n            if (parts[i] !== '') {\n                this._values[property] = parts[i];\n            }\n        }\n        return v;\n    };\n};\n\n//\n//  Companion to implicitSetter, but for the individual parts.\n//  This sets the individual value, and checks to see if all four\n//  sub-parts are set.  If so, it sets the shorthand version and removes\n//  the individual parts from the cssText.\n//\nexports.subImplicitSetter = function (prefix, part, isValid, parser) {\n    var property = prefix + '-' + part;\n    var subparts = [prefix+\"-top\", prefix+\"-right\", prefix+\"-bottom\", prefix+\"-left\"];\n\n    return function (v) {\n        if (typeof v === 'number') {\n            v = v.toString();\n        }\n        if (typeof v !== 'string') {\n            return undefined;\n        }\n        if (!isValid(v)) {\n            return undefined;\n        }\n        v = parser(v);\n        this._setProperty(property,v);\n        var parts = [];\n        for (var i = 0; i < 4; i++) {\n            if (this._values[subparts[i]] == null || this._values[subparts[i]] === '') {\n                break;\n            }\n            parts.push(this._values[subparts[i]]);\n        }\n        if (parts.length === 4) {\n            for (i = 0; i < 4; i++) {\n                this.removeProperty(subparts[i]);\n                this._values[subparts[i]] = parts[i];\n            }\n            this._setProperty(prefix,parts.join(\" \"));\n        }\n        return v;\n    };\n};\n\n\nvar camel_to_dashed = /[A-Z]/g;\n/*jslint regexp: true*/\nvar first_segment = /^\\([^\\-]\\)-/;\n/*jslint regexp: false*/\nvar vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];\nexports.camelToDashed = function (camel_case) {\n    var match;\n    var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();\n    match = dashed.match(first_segment);\n    if (match && vendor_prefixes.indexOf(match[1]) !== -1) {\n        dashed = '-' + dashed;\n    }\n    return dashed;\n};\n"]},"metadata":{},"sourceType":"script"}