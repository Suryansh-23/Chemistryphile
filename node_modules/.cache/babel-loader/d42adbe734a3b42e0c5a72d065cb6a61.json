{"ast":null,"code":"'use strict';\n\nvar Parser = require('../tree_construction/parser'),\n    ParsingUnit = require('./parsing_unit'); //API\n\n\nexports.parseDocument = function (html, treeAdapter) {\n  //NOTE: this should be reentrant, so we create new parser here\n  var parser = new Parser(treeAdapter),\n      parsingUnit = new ParsingUnit(parser); //NOTE: override parser loop method\n\n  parser._runParsingLoop = function () {\n    parsingUnit.parsingLoopLock = true;\n\n    while (!parsingUnit.suspended && !this.stopped) this._iterateParsingLoop();\n\n    parsingUnit.parsingLoopLock = false;\n    if (this.stopped) parsingUnit.callback(this.document);\n  }; //NOTE: wait while parserController will be adopted by calling code, then\n  //start parsing\n\n\n  process.nextTick(function () {\n    parser.parse(html);\n  });\n  return parsingUnit;\n};\n\nexports.parseInnerHtml = function (innerHtml, contextElement, treeAdapter) {\n  //NOTE: this should be reentrant, so we create new parser here\n  var parser = new Parser(treeAdapter);\n  return parser.parseFragment(innerHtml, contextElement);\n};","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/node_modules/parse5/lib/jsdom/jsdom_parser.js"],"names":["Parser","require","ParsingUnit","exports","parseDocument","html","treeAdapter","parser","parsingUnit","_runParsingLoop","parsingLoopLock","suspended","stopped","_iterateParsingLoop","callback","document","process","nextTick","parse","parseInnerHtml","innerHtml","contextElement","parseFragment"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,6BAAD,CAApB;AAAA,IACIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CADzB,C,CAGA;;;AACAE,OAAO,CAACC,aAAR,GAAwB,UAAUC,IAAV,EAAgBC,WAAhB,EAA6B;AACjD;AACA,MAAIC,MAAM,GAAG,IAAIP,MAAJ,CAAWM,WAAX,CAAb;AAAA,MACIE,WAAW,GAAG,IAAIN,WAAJ,CAAgBK,MAAhB,CADlB,CAFiD,CAKjD;;AACAA,EAAAA,MAAM,CAACE,eAAP,GAAyB,YAAY;AACjCD,IAAAA,WAAW,CAACE,eAAZ,GAA8B,IAA9B;;AAEA,WAAO,CAACF,WAAW,CAACG,SAAb,IAA0B,CAAC,KAAKC,OAAvC,EACI,KAAKC,mBAAL;;AAEJL,IAAAA,WAAW,CAACE,eAAZ,GAA8B,KAA9B;AAEA,QAAI,KAAKE,OAAT,EACIJ,WAAW,CAACM,QAAZ,CAAqB,KAAKC,QAA1B;AACP,GAVD,CANiD,CAkBjD;AACA;;;AACAC,EAAAA,OAAO,CAACC,QAAR,CAAiB,YAAY;AACzBV,IAAAA,MAAM,CAACW,KAAP,CAAab,IAAb;AACH,GAFD;AAIA,SAAOG,WAAP;AACH,CAzBD;;AA2BAL,OAAO,CAACgB,cAAR,GAAyB,UAAUC,SAAV,EAAqBC,cAArB,EAAqCf,WAArC,EAAkD;AACvE;AACA,MAAIC,MAAM,GAAG,IAAIP,MAAJ,CAAWM,WAAX,CAAb;AAEA,SAAOC,MAAM,CAACe,aAAP,CAAqBF,SAArB,EAAgCC,cAAhC,CAAP;AACH,CALD","sourcesContent":["'use strict';\r\n\r\nvar Parser = require('../tree_construction/parser'),\r\n    ParsingUnit = require('./parsing_unit');\r\n\r\n//API\r\nexports.parseDocument = function (html, treeAdapter) {\r\n    //NOTE: this should be reentrant, so we create new parser here\r\n    var parser = new Parser(treeAdapter),\r\n        parsingUnit = new ParsingUnit(parser);\r\n\r\n    //NOTE: override parser loop method\r\n    parser._runParsingLoop = function () {\r\n        parsingUnit.parsingLoopLock = true;\r\n\r\n        while (!parsingUnit.suspended && !this.stopped)\r\n            this._iterateParsingLoop();\r\n\r\n        parsingUnit.parsingLoopLock = false;\r\n\r\n        if (this.stopped)\r\n            parsingUnit.callback(this.document);\r\n    };\r\n\r\n    //NOTE: wait while parserController will be adopted by calling code, then\r\n    //start parsing\r\n    process.nextTick(function () {\r\n        parser.parse(html);\r\n    });\r\n\r\n    return parsingUnit;\r\n};\r\n\r\nexports.parseInnerHtml = function (innerHtml, contextElement, treeAdapter) {\r\n    //NOTE: this should be reentrant, so we create new parser here\r\n    var parser = new Parser(treeAdapter);\r\n\r\n    return parser.parseFragment(innerHtml, contextElement);\r\n};"]},"metadata":{},"sourceType":"script"}