{"ast":null,"code":"\"use strict\";\n\nvar inheritFrom = require(\"../utils\").inheritFrom;\n\nmodule.exports = function (core) {\n  // TODO: constructor should not take ownerDocument\n  core.Text = function Text(ownerDocument, data) {\n    core.CharacterData.call(this, ownerDocument, data);\n  };\n\n  inheritFrom(core.CharacterData, core.Text, {\n    nodeType: core.Node.TEXT_NODE,\n    // TODO should be on prototype, not here\n    splitText: function (offset) {\n      offset = offset >>> 0;\n      var length = this.length;\n\n      if (offset > length) {\n        throw new core.DOMException(core.DOMException.INDEX_SIZE_ERR);\n      }\n\n      var count = length - offset;\n      var newData = this.substringData(offset, count);\n\n      var newNode = this._ownerDocument.createTextNode(newData);\n\n      var parent = this._parentNode;\n\n      if (parent !== null) {\n        parent.insertBefore(newNode, this.nextSibling);\n      }\n\n      this.replaceData(offset, count, \"\");\n      return newNode; // TODO: range stuff\n    } // TODO: wholeText property\n\n  });\n};","map":{"version":3,"sources":["F:/JavaScript/Projects/chemistryphile/node_modules/jsdom-no-contextify/lib/jsdom/living/text.js"],"names":["inheritFrom","require","module","exports","core","Text","ownerDocument","data","CharacterData","call","nodeType","Node","TEXT_NODE","splitText","offset","length","DOMException","INDEX_SIZE_ERR","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","_parentNode","insertBefore","nextSibling","replaceData"],"mappings":"AAAA;;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,WAAtC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B;AACAA,EAAAA,IAAI,CAACC,IAAL,GAAY,SAASA,IAAT,CAAcC,aAAd,EAA6BC,IAA7B,EAAmC;AAC7CH,IAAAA,IAAI,CAACI,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,EAA8BH,aAA9B,EAA6CC,IAA7C;AACD,GAFD;;AAIAP,EAAAA,WAAW,CAACI,IAAI,CAACI,aAAN,EAAqBJ,IAAI,CAACC,IAA1B,EAAgC;AACzCK,IAAAA,QAAQ,EAAEN,IAAI,CAACO,IAAL,CAAUC,SADqB;AACV;AAC/BC,IAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkB;AAC3BA,MAAAA,MAAM,GAAGA,MAAM,KAAK,CAApB;AAEA,UAAIC,MAAM,GAAG,KAAKA,MAAlB;;AAEA,UAAID,MAAM,GAAGC,MAAb,EAAqB;AACnB,cAAM,IAAIX,IAAI,CAACY,YAAT,CAAsBZ,IAAI,CAACY,YAAL,CAAkBC,cAAxC,CAAN;AACD;;AAED,UAAIC,KAAK,GAAGH,MAAM,GAAGD,MAArB;AACA,UAAIK,OAAO,GAAG,KAAKC,aAAL,CAAmBN,MAAnB,EAA2BI,KAA3B,CAAd;;AAEA,UAAIG,OAAO,GAAG,KAAKC,cAAL,CAAoBC,cAApB,CAAmCJ,OAAnC,CAAd;;AAEA,UAAIK,MAAM,GAAG,KAAKC,WAAlB;;AAEA,UAAID,MAAM,KAAK,IAAf,EAAqB;AACnBA,QAAAA,MAAM,CAACE,YAAP,CAAoBL,OAApB,EAA6B,KAAKM,WAAlC;AACD;;AAED,WAAKC,WAAL,CAAiBd,MAAjB,EAAyBI,KAAzB,EAAgC,EAAhC;AAEA,aAAOG,OAAP,CAtB2B,CAwB3B;AACD,KA3BwC,CA6BzC;;AA7ByC,GAAhC,CAAX;AA+BD,CArCD","sourcesContent":["\"use strict\";\nvar inheritFrom = require(\"../utils\").inheritFrom;\n\nmodule.exports = function (core) {\n  // TODO: constructor should not take ownerDocument\n  core.Text = function Text(ownerDocument, data) {\n    core.CharacterData.call(this, ownerDocument, data);\n  };\n\n  inheritFrom(core.CharacterData, core.Text, {\n    nodeType: core.Node.TEXT_NODE, // TODO should be on prototype, not here\n    splitText: function (offset) {\n      offset = offset >>> 0;\n\n      var length = this.length;\n\n      if (offset > length) {\n        throw new core.DOMException(core.DOMException.INDEX_SIZE_ERR);\n      }\n\n      var count = length - offset;\n      var newData = this.substringData(offset, count);\n\n      var newNode = this._ownerDocument.createTextNode(newData);\n\n      var parent = this._parentNode;\n\n      if (parent !== null) {\n        parent.insertBefore(newNode, this.nextSibling);\n      }\n\n      this.replaceData(offset, count, \"\");\n\n      return newNode;\n\n      // TODO: range stuff\n    },\n\n    // TODO: wholeText property\n  });\n};\n"]},"metadata":{},"sourceType":"script"}